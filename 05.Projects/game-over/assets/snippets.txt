
// gameConfig

const gameState = {
  onColor: 0xaaffaa,
  offColor: 0xffaaaa,
  score: 0,
};

const config = {
  width: 800,
  height: 600,
  backgroundColor: 0xCCCCFF,
  scene: {
    preload,
    create,
    update,
  },
  physics: {
    default: 'arcade',
    arcade: {
      gravity: { y: 300 },
      debug: true
      enableBody: true,
    }
  }
};

const game = new Phaser.Game(config)

----------

// Preload
this.load.image('dragon', 'assets/sprites/dragon.png'); // Sprite
this.load.image('bg', 'assets/images/bg.png'); // Background
this.load.audio('theme', 'assets/music/theme.wav'); // Theme music
this.load.audio('chime', 'assets/sounds/chime.wav); // Action sound
this.load.spritesheet( 'spriteKey' , 'spriteSheet.png', { frameWidth: 100, frameHeight: 100 });

----------

// Create
this.add.text(50, 100, "WU18 - JumperPRO", { font: "40px Times New Roman", fill: "#ffa0d0"});
gameState.scoreText = this.add.text(16, 16, 'Score: 0', { fontSize: '15px', fill: '#000000' })

this.add.sprite(40, 80, 'dragon'); // Add sprite
this.physics.add.sprite(320, 300, 'player'); // Add sprite with physics
this.add.image(200, 200, 'bg'); // Add background image

gameState.exampleSprite = this.physics.add.sprite(100, 600, 'spriteKey');

this.anims.create({
  key: 'movement',
  frames: this.anims.generateFrameNumbers('spriteKey', { start: 0, end: 5 }),
  frameRate: 10, // Default 24
  repeat: -1 // -1 = Continuously repeat the animation.
});

# Tweens - easing function for animations in Phaser
gameState.moveTween = this.tweens.add({
  targets: gameState.exampleSprite, // Affected Sprite or array
  x: 300, // Finall x-cordinate for this sprite
  ease: 'Linear',
  duration: 3000,
  repeat: -1, // -1 = continuously play
  yoyo: true
});

gameState.moveTween.play();

// Later on … 
gameState.moveTween.stop();

# Static Group - Not effected by gravity
const platforms = this.physics.add.staticGroup();
platforms.create(320, 350, 'platform');

# Physic Group - Effected by gravity
const enemies = this.physics.add.group();
enemies.create(320, 10, 'enemy'); 

# Add a collider between the player and platform
const player = this.physics.add.sprite(100, 100, 'player');
const platform = this.physics.add.sprite(100, 500, 'platform');
this.physics.add.collider(player, platform);

# Collider between enemies and platform that fires a callback
this.physics.add.collider(enemies, platforms, function(singleEnemy) {
  singleEnemy.destroy();
  gameState.score += 10;
  gameState.scoreText.setText(`Score: ${gameState.score}`)
});

# GameOver
this.physics.add.collider(gameState.player, bugs, () => {
  bugGenLoop.destroy() // A loop variable that creates enemies
  this.add.text(195, 485, 'Game Over', { fontSize: '15px', fill: '#000000' })
  physics.pause()
});

# Restart game/scene
this.input.on('pointerup',() => {
  gameState.score = 0;
  this.scene.restart()
})

player.setCollideWorldBounds(true) // Player sprite can’t fall off the screen!

gameState.chimeSound = this.sound.add('chime');
gameState.music = this.sound.add('theme');
gameState.music.play();

gameState.circle = this.add.circle(20, 20, 5, 0xff0000); // Add a circle (x, y, radius, fillColor)
gameState.rectangle = this.add.rectangle(40, 60, 90, 10, 0x00ff00); // Add a rectangele (x, y, width, height, fillColor)

gameState.circle.setInteractive() // Listen in for interactive events on the GameObject.
gameState.rectangle.setInteractive()

gameState.circle.on('pointerup', function(){
  gameState.circle.fillColor = gameState.offColor
  gameState.rectangle.fillColor = gameState.onColor
}

gameState.circle.on('pointerup', function() {
  this.fillColor = 0x00FF00;
});

gameState.circle.on('pointerup', function() {
  gameState.chimeSound.play();
});

# More Mouse-events:
'pointerdown'
'pointerup'
'pointerover'
'pointerout'

# Keyboard Events:
this.input.keyboard.on()
this.input.keyboard.on('keyboard-W', function() {
  gameState.circle.fillColor = 0xFFFF00;
});

createCursorKeys()
# Creates a listener for keys: UP, DOWN, LEFT, RIGHT, SHIFT and SPACE

gameState.cursors = this.input.keyboard.createCursorKeys();

# README: https://photonstorm.github.io/phaser3-docs/Phaser.Input.Keyboard.html
if (Phaser.Input.Keyboard.JustDown(gameState.cursors.space) && gameState.player.body.touching.down) {
  gameState.player.anims.play('jump', true);
  gameState.player.setVelocityY(-500);
}

// Function that triggers when the player-sprite overlapps the enemy-sprite
this.physics.add.overlap(gameState.player, gameState.enemy, () => {
  gameState.enemy.anims.pause() // Pause animation on the enemy sprite
  this.anims.pauseAll() // Pause all animations in this scene
});

# Example loop:
for (let shape of pegasusShapes) {
  shape.smoothness = 25;
  shape.strokeColor = 0x000000;
  shape.isStroked = true;
  shape.setOrigin(0, 1);
  shape.lineWidth = 2
  shape.setInteractive()
  shape.setScale(.5);

  shape.on('pointerup', function() {
    this.fillColor = gameState.selectedColor
  });

  shape.on('pointerover', function() { 
  this.setBlendMode(Phaser.BlendModes.SCREEN)
  });

  shape.on('pointerout', function() { 
    this.setBlendMode(Phaser.BlendModes.NORMAL)
  });

# Create Vector in Phaser
let path = scene.add.path();
  path.moveTo(12.7257659,202.472652);
  path.add(new Phaser.Curves.CubicBezier(new Phaser.Math.Vector2(12.7257659,202.472652), 
  new Phaser.Math.Vector2(19.8214691,192.476558), 
  new Phaser.Math.Vector2(31.4699066,182.212886), 
  new Phaser.Math.Vector2(61.1847503,174.816402)));

# Timed event loop that calls a function every 100 milliseconds
const enemyGenLoop = this.time.addEvent({
  callback: generateEnemy,
  delay: 100,
  callbackScope: this,
  loop: true,
})

----------

// Update (Called 60 times per second)
gameState.circle.x += 1;
gameState.rectangle.y += 1;

if (gameState.cursors.left.isDown) {
  gameState.circle.x -= 3;
}

if (cursors.up.isDown && player.body.touching.down) // Jump
{
    player.setVelocityY(-330);
}

if (gameState.cursors.left.isDown) {
  heroSprite.setVelocityX(-160);
} else if (gameState.cursors.right.isDown) {
  heroSprite.setVelocityX(160);
} else {
  heroSprite.setVelocityX(0);
}

if (gameState.cursors.right.isDown) {
  gameState.exampleSprite.setVelocityX(100);
  gameState.exampleSprite.anims.play('movement', true);
  gameState.exampleSprite.flipX = false;
  // .play('animation-key', true) = True: Don´t play the animation from start if it´s already playing
  // .flipX = Direction to play the animation, false = default direction of spriteSheet, true = flipp deirection and playback of sprite on the x-axis
}


----------

// Multiple scenes and refractored files:

# index.html

<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Phaser Game</title>
</head>
<body>
  <script src="https://cdn.jsdelivr.net/npm/phaser@3.16.2/dist/phaser.min.js"></script>
  <script src="Scene1.js"></script>
  <script src="Scene2.js"></script>
  <script src="game.js"></script>
</body>
</html>

# Scene 1
class Scene1 extends Phaser.Scene {
	constructor() {
		super({ key: 'Scene1' })
	}
  create() {
    this.add.text(110, 150, 'This is the first Scene!', {fill: '#000000', fontSize: '20px'})
		this.input.on('pointerdown', () => {  
			this.scene.stop('Scene1')
			this.scene.start('Scene2')
		})
  }
}

# Scene 2
class Scene2 extends Phaser.Scene {
	constructor() {
		super({ key: 'Scene2' })
	}
  create() {
    this.add.text(110, 300, 'This is the second Scene!', {fill: '#000000', fontSize: '20px'})
		this.input.on('pointerdown', () => {
			this.scene.stop('Scene2')
			this.scene.start('Scene1')
		})
  }
}

# game.js
const gameState = {
  score: 0
};
const config = {
  type: Phaser.AUTO,
  width: 500,
  height: 600,
  backgroundColor: "b9eaff",
  scene: [Scene1, Scene2]
};
const game = new Phaser.Game(config);

# Scene Template
class ExampleScene extends Phaser.Scene {
  constructor(){
    super({ key: 'ExampleScene' });
  }
  preload() {
    // ...
  }
  create() {
    // ...
  }
  update() {
    // ...
  }
}